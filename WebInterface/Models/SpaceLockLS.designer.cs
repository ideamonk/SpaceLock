#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebInterface.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="spacelockDB")]
	public partial class SpaceLockLSDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertintrusion(intrusion instance);
    partial void Updateintrusion(intrusion instance);
    partial void Deleteintrusion(intrusion instance);
    partial void Insertpreset(preset instance);
    partial void Updatepreset(preset instance);
    partial void Deletepreset(preset instance);
    partial void InsertcamStatus(camStatus instance);
    partial void UpdatecamStatus(camStatus instance);
    partial void DeletecamStatus(camStatus instance);
    partial void Insertsetting(setting instance);
    partial void Updatesetting(setting instance);
    partial void Deletesetting(setting instance);
    partial void Insertuser(user instance);
    partial void Updateuser(user instance);
    partial void Deleteuser(user instance);
    partial void InsertStream(Stream instance);
    partial void UpdateStream(Stream instance);
    partial void DeleteStream(Stream instance);
    #endregion
		
		public SpaceLockLSDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["spacelockDBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SpaceLockLSDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SpaceLockLSDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SpaceLockLSDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SpaceLockLSDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<intrusion> intrusions
		{
			get
			{
				return this.GetTable<intrusion>();
			}
		}
		
		public System.Data.Linq.Table<preset> presets
		{
			get
			{
				return this.GetTable<preset>();
			}
		}
		
		public System.Data.Linq.Table<camStatus> camStatus
		{
			get
			{
				return this.GetTable<camStatus>();
			}
		}
		
		public System.Data.Linq.Table<setting> settings
		{
			get
			{
				return this.GetTable<setting>();
			}
		}
		
		public System.Data.Linq.Table<user> users
		{
			get
			{
				return this.GetTable<user>();
			}
		}
		
		public System.Data.Linq.Table<Stream> Streams
		{
			get
			{
				return this.GetTable<Stream>();
			}
		}
	}
	
	[Table(Name="dbo.intrusions")]
	public partial class intrusion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _int_id;
		
		private System.Nullable<System.DateTime> _int_date;
		
		private System.Nullable<System.TimeSpan> _int_time;
		
		private string _int_desc;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onint_idChanging(int value);
    partial void Onint_idChanged();
    partial void Onint_dateChanging(System.Nullable<System.DateTime> value);
    partial void Onint_dateChanged();
    partial void Onint_timeChanging(System.Nullable<System.TimeSpan> value);
    partial void Onint_timeChanged();
    partial void Onint_descChanging(string value);
    partial void Onint_descChanged();
    #endregion
		
		public intrusion()
		{
			OnCreated();
		}
		
		[Column(Storage="_int_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int int_id
		{
			get
			{
				return this._int_id;
			}
			set
			{
				if ((this._int_id != value))
				{
					this.Onint_idChanging(value);
					this.SendPropertyChanging();
					this._int_id = value;
					this.SendPropertyChanged("int_id");
					this.Onint_idChanged();
				}
			}
		}
		
		[Column(Storage="_int_date", DbType="Date")]
		public System.Nullable<System.DateTime> int_date
		{
			get
			{
				return this._int_date;
			}
			set
			{
				if ((this._int_date != value))
				{
					this.Onint_dateChanging(value);
					this.SendPropertyChanging();
					this._int_date = value;
					this.SendPropertyChanged("int_date");
					this.Onint_dateChanged();
				}
			}
		}
		
		[Column(Storage="_int_time", DbType="Time")]
		public System.Nullable<System.TimeSpan> int_time
		{
			get
			{
				return this._int_time;
			}
			set
			{
				if ((this._int_time != value))
				{
					this.Onint_timeChanging(value);
					this.SendPropertyChanging();
					this._int_time = value;
					this.SendPropertyChanged("int_time");
					this.Onint_timeChanged();
				}
			}
		}
		
		[Column(Storage="_int_desc", DbType="VarChar(MAX)")]
		public string int_desc
		{
			get
			{
				return this._int_desc;
			}
			set
			{
				if ((this._int_desc != value))
				{
					this.Onint_descChanging(value);
					this.SendPropertyChanging();
					this._int_desc = value;
					this.SendPropertyChanged("int_desc");
					this.Onint_descChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.presets")]
	public partial class preset : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _pre_id;
		
		private string _pre_name;
		
		private System.Nullable<double> _cam_x;
		
		private System.Nullable<double> _cam_y;
		
		private System.Nullable<double> _cam_z;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onpre_idChanging(int value);
    partial void Onpre_idChanged();
    partial void Onpre_nameChanging(string value);
    partial void Onpre_nameChanged();
    partial void Oncam_xChanging(System.Nullable<double> value);
    partial void Oncam_xChanged();
    partial void Oncam_yChanging(System.Nullable<double> value);
    partial void Oncam_yChanged();
    partial void Oncam_zChanging(System.Nullable<double> value);
    partial void Oncam_zChanged();
    #endregion
		
		public preset()
		{
			OnCreated();
		}
		
		[Column(Storage="_pre_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int pre_id
		{
			get
			{
				return this._pre_id;
			}
			set
			{
				if ((this._pre_id != value))
				{
					this.Onpre_idChanging(value);
					this.SendPropertyChanging();
					this._pre_id = value;
					this.SendPropertyChanged("pre_id");
					this.Onpre_idChanged();
				}
			}
		}
		
		[Column(Storage="_pre_name", DbType="NVarChar(MAX)")]
		public string pre_name
		{
			get
			{
				return this._pre_name;
			}
			set
			{
				if ((this._pre_name != value))
				{
					this.Onpre_nameChanging(value);
					this.SendPropertyChanging();
					this._pre_name = value;
					this.SendPropertyChanged("pre_name");
					this.Onpre_nameChanged();
				}
			}
		}
		
		[Column(Storage="_cam_x", DbType="Float")]
		public System.Nullable<double> cam_x
		{
			get
			{
				return this._cam_x;
			}
			set
			{
				if ((this._cam_x != value))
				{
					this.Oncam_xChanging(value);
					this.SendPropertyChanging();
					this._cam_x = value;
					this.SendPropertyChanged("cam_x");
					this.Oncam_xChanged();
				}
			}
		}
		
		[Column(Storage="_cam_y", DbType="Float")]
		public System.Nullable<double> cam_y
		{
			get
			{
				return this._cam_y;
			}
			set
			{
				if ((this._cam_y != value))
				{
					this.Oncam_yChanging(value);
					this.SendPropertyChanging();
					this._cam_y = value;
					this.SendPropertyChanged("cam_y");
					this.Oncam_yChanged();
				}
			}
		}
		
		[Column(Storage="_cam_z", DbType="Float")]
		public System.Nullable<double> cam_z
		{
			get
			{
				return this._cam_z;
			}
			set
			{
				if ((this._cam_z != value))
				{
					this.Oncam_zChanging(value);
					this.SendPropertyChanging();
					this._cam_z = value;
					this.SendPropertyChanged("cam_z");
					this.Oncam_zChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.camStatus")]
	public partial class camStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _punkouter;
		
		private System.Nullable<int> _surveillance;
		
		private System.Nullable<System.TimeSpan> _uptime;
		
		private System.Nullable<System.DateTime> _last_date;
		
		private System.Nullable<System.TimeSpan> _last_time;
		
		private System.Nullable<double> _cam_x;
		
		private System.Nullable<double> _cam_y;
		
		private System.Nullable<double> _cam_z;
		
		private System.Nullable<int> _pre_id;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpunkouterChanging(int value);
    partial void OnpunkouterChanged();
    partial void OnsurveillanceChanging(System.Nullable<int> value);
    partial void OnsurveillanceChanged();
    partial void OnuptimeChanging(System.Nullable<System.TimeSpan> value);
    partial void OnuptimeChanged();
    partial void Onlast_dateChanging(System.Nullable<System.DateTime> value);
    partial void Onlast_dateChanged();
    partial void Onlast_timeChanging(System.Nullable<System.TimeSpan> value);
    partial void Onlast_timeChanged();
    partial void Oncam_xChanging(System.Nullable<double> value);
    partial void Oncam_xChanged();
    partial void Oncam_yChanging(System.Nullable<double> value);
    partial void Oncam_yChanged();
    partial void Oncam_zChanging(System.Nullable<double> value);
    partial void Oncam_zChanged();
    partial void Onpre_idChanging(System.Nullable<int> value);
    partial void Onpre_idChanged();
    #endregion
		
		public camStatus()
		{
			OnCreated();
		}
		
		[Column(Storage="_punkouter", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int punkouter
		{
			get
			{
				return this._punkouter;
			}
			set
			{
				if ((this._punkouter != value))
				{
					this.OnpunkouterChanging(value);
					this.SendPropertyChanging();
					this._punkouter = value;
					this.SendPropertyChanged("punkouter");
					this.OnpunkouterChanged();
				}
			}
		}
		
		[Column(Storage="_surveillance", DbType="Int")]
		public System.Nullable<int> surveillance
		{
			get
			{
				return this._surveillance;
			}
			set
			{
				if ((this._surveillance != value))
				{
					this.OnsurveillanceChanging(value);
					this.SendPropertyChanging();
					this._surveillance = value;
					this.SendPropertyChanged("surveillance");
					this.OnsurveillanceChanged();
				}
			}
		}
		
		[Column(Storage="_uptime", DbType="Time")]
		public System.Nullable<System.TimeSpan> uptime
		{
			get
			{
				return this._uptime;
			}
			set
			{
				if ((this._uptime != value))
				{
					this.OnuptimeChanging(value);
					this.SendPropertyChanging();
					this._uptime = value;
					this.SendPropertyChanged("uptime");
					this.OnuptimeChanged();
				}
			}
		}
		
		[Column(Storage="_last_date", DbType="Date")]
		public System.Nullable<System.DateTime> last_date
		{
			get
			{
				return this._last_date;
			}
			set
			{
				if ((this._last_date != value))
				{
					this.Onlast_dateChanging(value);
					this.SendPropertyChanging();
					this._last_date = value;
					this.SendPropertyChanged("last_date");
					this.Onlast_dateChanged();
				}
			}
		}
		
		[Column(Storage="_last_time", DbType="Time")]
		public System.Nullable<System.TimeSpan> last_time
		{
			get
			{
				return this._last_time;
			}
			set
			{
				if ((this._last_time != value))
				{
					this.Onlast_timeChanging(value);
					this.SendPropertyChanging();
					this._last_time = value;
					this.SendPropertyChanged("last_time");
					this.Onlast_timeChanged();
				}
			}
		}
		
		[Column(Storage="_cam_x", DbType="Float")]
		public System.Nullable<double> cam_x
		{
			get
			{
				return this._cam_x;
			}
			set
			{
				if ((this._cam_x != value))
				{
					this.Oncam_xChanging(value);
					this.SendPropertyChanging();
					this._cam_x = value;
					this.SendPropertyChanged("cam_x");
					this.Oncam_xChanged();
				}
			}
		}
		
		[Column(Storage="_cam_y", DbType="Float")]
		public System.Nullable<double> cam_y
		{
			get
			{
				return this._cam_y;
			}
			set
			{
				if ((this._cam_y != value))
				{
					this.Oncam_yChanging(value);
					this.SendPropertyChanging();
					this._cam_y = value;
					this.SendPropertyChanged("cam_y");
					this.Oncam_yChanged();
				}
			}
		}
		
		[Column(Storage="_cam_z", DbType="Float")]
		public System.Nullable<double> cam_z
		{
			get
			{
				return this._cam_z;
			}
			set
			{
				if ((this._cam_z != value))
				{
					this.Oncam_zChanging(value);
					this.SendPropertyChanging();
					this._cam_z = value;
					this.SendPropertyChanged("cam_z");
					this.Oncam_zChanged();
				}
			}
		}
		
		[Column(Storage="_pre_id", DbType="Int")]
		public System.Nullable<int> pre_id
		{
			get
			{
				return this._pre_id;
			}
			set
			{
				if ((this._pre_id != value))
				{
					this.Onpre_idChanging(value);
					this.SendPropertyChanging();
					this._pre_id = value;
					this.SendPropertyChanged("pre_id");
					this.Onpre_idChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.settings")]
	public partial class setting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _int_tracking;
		
		private System.Nullable<int> _sms_alerts;
		
		private System.Nullable<int> _lookup_time;
		
		private System.Nullable<int> _archive_max;
		
		private string _punk;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onint_trackingChanging(int value);
    partial void Onint_trackingChanged();
    partial void Onsms_alertsChanging(System.Nullable<int> value);
    partial void Onsms_alertsChanged();
    partial void Onlookup_timeChanging(System.Nullable<int> value);
    partial void Onlookup_timeChanged();
    partial void Onarchive_maxChanging(System.Nullable<int> value);
    partial void Onarchive_maxChanged();
    partial void OnpunkChanging(string value);
    partial void OnpunkChanged();
    #endregion
		
		public setting()
		{
			OnCreated();
		}
		
		[Column(Storage="_int_tracking", DbType="Int NOT NULL")]
		public int int_tracking
		{
			get
			{
				return this._int_tracking;
			}
			set
			{
				if ((this._int_tracking != value))
				{
					this.Onint_trackingChanging(value);
					this.SendPropertyChanging();
					this._int_tracking = value;
					this.SendPropertyChanged("int_tracking");
					this.Onint_trackingChanged();
				}
			}
		}
		
		[Column(Storage="_sms_alerts", DbType="Int")]
		public System.Nullable<int> sms_alerts
		{
			get
			{
				return this._sms_alerts;
			}
			set
			{
				if ((this._sms_alerts != value))
				{
					this.Onsms_alertsChanging(value);
					this.SendPropertyChanging();
					this._sms_alerts = value;
					this.SendPropertyChanged("sms_alerts");
					this.Onsms_alertsChanged();
				}
			}
		}
		
		[Column(Storage="_lookup_time", DbType="Int")]
		public System.Nullable<int> lookup_time
		{
			get
			{
				return this._lookup_time;
			}
			set
			{
				if ((this._lookup_time != value))
				{
					this.Onlookup_timeChanging(value);
					this.SendPropertyChanging();
					this._lookup_time = value;
					this.SendPropertyChanged("lookup_time");
					this.Onlookup_timeChanged();
				}
			}
		}
		
		[Column(Storage="_archive_max", DbType="Int")]
		public System.Nullable<int> archive_max
		{
			get
			{
				return this._archive_max;
			}
			set
			{
				if ((this._archive_max != value))
				{
					this.Onarchive_maxChanging(value);
					this.SendPropertyChanging();
					this._archive_max = value;
					this.SendPropertyChanged("archive_max");
					this.Onarchive_maxChanged();
				}
			}
		}
		
		[Column(Storage="_punk", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string punk
		{
			get
			{
				return this._punk;
			}
			set
			{
				if ((this._punk != value))
				{
					this.OnpunkChanging(value);
					this.SendPropertyChanging();
					this._punk = value;
					this.SendPropertyChanged("punk");
					this.OnpunkChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.users")]
	public partial class user : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _username;
		
		private string _password;
		
		private string _phone_no;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void Onphone_noChanging(string value);
    partial void Onphone_noChanged();
    #endregion
		
		public user()
		{
			OnCreated();
		}
		
		[Column(Storage="_username", DbType="NChar(5)", IsPrimaryKey=true)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[Column(Storage="_password", DbType="VarChar(MAX)")]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[Column(Storage="_phone_no", DbType="NChar(10)")]
		public string phone_no
		{
			get
			{
				return this._phone_no;
			}
			set
			{
				if ((this._phone_no != value))
				{
					this.Onphone_noChanging(value);
					this.SendPropertyChanging();
					this._phone_no = value;
					this.SendPropertyChanged("phone_no");
					this.Onphone_noChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Stream")]
	public partial class Stream : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _punk;
		
		private System.Data.Linq.Binary _frame;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpunkChanging(string value);
    partial void OnpunkChanged();
    partial void OnframeChanging(System.Data.Linq.Binary value);
    partial void OnframeChanged();
    #endregion
		
		public Stream()
		{
			OnCreated();
		}
		
		[Column(Storage="_punk", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string punk
		{
			get
			{
				return this._punk;
			}
			set
			{
				if ((this._punk != value))
				{
					this.OnpunkChanging(value);
					this.SendPropertyChanging();
					this._punk = value;
					this.SendPropertyChanged("punk");
					this.OnpunkChanged();
				}
			}
		}
		
		[Column(Storage="_frame", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary frame
		{
			get
			{
				return this._frame;
			}
			set
			{
				if ((this._frame != value))
				{
					this.OnframeChanging(value);
					this.SendPropertyChanging();
					this._frame = value;
					this.SendPropertyChanged("frame");
					this.OnframeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
